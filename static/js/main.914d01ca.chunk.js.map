{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["happyThings","List","items","this","props","map","item","key","date","removeItem","className","React","Component","ListItem","onClickDelete","bind","index","parseInt","value","onClick","Button","children","defaultProps","type","Form","onSubmit","event","console","log","preventDefault","newItemValue","refs","itemName","addItem","form","reset","ref","Header","count","storedList","JSON","parse","localStorage","getItem","length","headerString","GratitudeListApp","downloadList","state","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","stringify","temp_anchor","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","happyThing","unshift","Date","getTime","toLocaleString","setState","setItem","itemIndex","splice","id","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.914d01ca.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst generateKey = () => {\n  return `${new Date().getTime()}`;\n}\n\nlet happyThings = [];\n\nclass List extends React.Component {\n  render() {\n    let items = this.props.items.map((item) => {\n      return (\n        <ListItem\n          key={item.key}\n          item={item}\n          date={item.date}\n          removeItem={this.props.removeItem}\n        />\n      );\n    });\n    return (\n      <ul className=\"list-group\"> {items} </ul>\n    );\n  }\n}\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  onClickDelete() {\n    let index = parseInt(this.props.index);\n    this.props.removeItem(index);\n  }\n\n  render() {\n    return (\n      <li className=\"list-group-item\">\n        <div className=\"item\">\n          <span\n            className=\"list-item\"\n          >\n            {this.props.item.value}\n          </span>\n          <span className=\"item-date\">\n            {this.props.item.date}\n          </span>\n          <span\n            className=\"close\"\n            onClick={this.onClickDelete}\n          >\n            X\n        </span>\n        </div>\n      </li>\n    )\n  }\n}\n\nconst Button = ({ onClick, className, children }) => {\n  Button.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n  }\n\n  Button.defaultProps = {\n    className: '',\n  }\n\n  return (\n    <button\n      onClick={onClick}\n      className={className}\n      type=\"button\"\n    >\n      {children}\n    </button>\n  )\n\n}\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(event) {\n    console.log('hi!');\n    event.preventDefault();\n    let newItemValue = this.refs.itemName.value;\n\n    if (newItemValue) {\n      this.props.addItem({ newItemValue });\n      this.refs.form.reset();\n    }\n  }\n\n  render() {\n    return (\n      <form\n        ref=\"form\"\n        type=\"submit\"\n        onSubmit={this.onSubmit}\n        className=\"form-inline\"\n      >\n        <div className=\"group\">\n          <input\n            type=\"text\"\n            ref=\"itemName\"\n          />\n          <span className=\"highlight\"></span>\n          <span className=\"bar\"></span>\n          <label>I'm grateful for...</label>\n          <Button\n            onClick={this.onSubmit}\n            className=\"btn\">\n            Add\n          </Button>\n        </div>\n      </form >\n    );\n  }\n}\n\nclass Header extends React.Component {\n  render() {\n    let count = ''\n    let storedList = JSON.parse(localStorage.getItem('storedList'))\n    if (storedList != null) {\n      count = storedList.length\n    }\n    let headerString = count > 1 ? \" reasons to be happy\" : \" reason to be happy\";\n    return <h1>{count} {headerString}</h1>;\n  }\n}\n\nclass GratitudeListApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.downloadList = this.downloadList.bind(this);\n    let storedList = JSON.parse(localStorage.getItem('storedList'))\n\n    if (storedList != null) {\n      happyThings = storedList\n    }\n\n    this.state = { happyThings: happyThings }\n  }\n\n  downloadList() {\n    let filename = \"gratitude-list.json\";\n    let contentType = \"application/json;charset=utf-8;\";\n\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      let blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(happyThings)))],\n        { type: contentType });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      let temp_anchor = document.createElement('a');\n      temp_anchor.download = filename;\n      temp_anchor.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(happyThings));\n      temp_anchor.target = '_blank';\n      document.body.appendChild(temp_anchor);\n      temp_anchor.click();\n      document.body.removeChild(temp_anchor);\n    }\n  }\n\n  addItem(happyThing) {\n    happyThings.unshift({\n      index: happyThings.length + 1,\n      value: happyThing.newItemValue,\n      key: generateKey(happyThing.newItemValue),\n      date: new Date().toLocaleString()\n    });\n    this.setState({ happyThings: happyThings });\n    localStorage.setItem('storedList', JSON.stringify(happyThings));\n  }\n\n  removeItem(itemIndex) {\n    happyThings.splice(itemIndex, 1);\n    this.setState({ happyThings: happyThings });\n  }\n\n  render() {\n    return (\n      <div id=\"main\">\n        <Header />\n        <Form addItem={this.addItem} />\n        <List\n          items={this.state.happyThings}\n          removeItem={this.removeItem}\n        />\n        <Button\n          onClick={this.downloadList}\n          className=\"download-btn\">\n          Download List\n        </Button>\n      </div >\n    );\n  }\n}\n\nexport default GratitudeListApp;\n\nexport {\n  Form,\n  List,\n  ListItem,\n  Header,\n  Button\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GratitudeListApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<GratitudeListApp />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}