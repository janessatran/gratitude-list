{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["happyThings","GratitudeList","items","this","props","map","item","key","date","removeItem","className","React","Component","GratitudeListItem","onClickDelete","bind","index","parseInt","value","onClick","GratitudeForm","onSubmit","refs","itemName","focus","event","preventDefault","newItemValue","addItem","form","reset","ref","type","id","GratitudeListHeader","countHappyThings","length","headerString","GratitudeListApp","storedList","JSON","parse","localStorage","getItem","state","happyThing","pre","unshift","Date","getTime","toLocaleString","setState","setItem","stringify","itemIndex","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39bae82d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst generateKey = (pre) => {\n  return `${pre}_${new Date().getTime()}`;\n}\n\nlet happyThings = [];\n\nclass GratitudeList extends React.Component {\n  render() {\n    let items = this.props.items.map((item) => {\n      return (\n        <GratitudeListItem\n          key={item.key}\n          item={item}\n          date={item.date}\n          removeItem={this.props.removeItem}\n        />\n      );\n    });\n    return (\n      <ul className=\"list-group\"> {items} </ul>\n    );\n  }\n}\n\nclass GratitudeListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  onClickDelete() {\n    let index = parseInt(this.props.index);\n    this.props.removeItem(index);\n  }\n\n  render() {\n    return (\n      <li className=\"list-group-item\">\n        <div className=\"item\">\n          <span\n            className=\"list-item\"\n          >\n            {this.props.item.value}\n          </span>\n          <span className=\"item-date\">\n            {this.props.item.date}\n          </span>\n          <span\n            className=\"close\"\n            onClick={this.onClickDelete}\n          >\n            X\n        </span>\n        </div>\n      </li>\n    )\n  }\n}\n\nclass GratitudeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.refs.itemName.focus();\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    let newItemValue = this.refs.itemName.value;\n\n    if (newItemValue) {\n      this.props.addItem({ newItemValue });\n      this.refs.form.reset();\n    }\n  }\n  render() {\n    return (\n      <form\n        ref=\"form\"\n        onSubmit={this.onSubmit}\n        className=\"form-inline\"\n      >\n        <div className=\"group\">\n          <input\n            type=\"text\"\n            ref=\"itemName\"\n          />\n          <span className=\"highlight\"></span>\n          <span className=\"bar\"></span>\n          <label>I'm grateful for...</label>\n          <button\n            type=\"submit\"\n            className=\"btn\"\n            id=\"add-button\">Add\n          </button>\n        </div>\n      </form >\n    );\n  }\n}\n\nclass GratitudeListHeader extends React.Component {\n  render() {\n    let countHappyThings = happyThings.length > 0 ? happyThings.length : '';\n    let headerString = countHappyThings > 1 ? \" reasons to be happy\" : \" reason to be happy\";\n    return <h1>{countHappyThings} {headerString}</h1>;\n  }\n}\n\nclass GratitudeListApp extends React.Component {\n  constructor(props) {\n    super(props);\n    let storedList = JSON.parse(localStorage.getItem(\"happyThings\"));\n    if (storedList) {\n      this.state = { happyThings: storedList }\n    } else {\n      this.state = { happyThings: [] };\n    }\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  addItem(happyThing) {\n    happyThings.unshift({\n      index: happyThing.length + 1,\n      value: happyThing.newItemValue,\n      key: generateKey(happyThing.newItemValue),\n      date: new Date().toLocaleString()\n    });\n    this.setState({ happyThings: happyThings });\n    localStorage.setItem('happyThings', JSON.stringify(happyThings));\n  }\n\n  removeItem(itemIndex) {\n    happyThings.splice(itemIndex, 1);\n    this.setState({ happyThings: happyThings });\n  }\n\n  render() {\n    return (\n      <div id=\"main\">\n        <GratitudeListHeader />\n        <GratitudeForm addItem={this.addItem} />\n        <GratitudeList\n          items={this.state.happyThings}\n          removeItem={this.removeItem}\n        />\n      </div >\n    );\n  }\n}\n\nexport default GratitudeListApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GratitudeListApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<GratitudeListApp />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}